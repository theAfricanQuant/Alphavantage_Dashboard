[
  {
    "objectID": "code_tests.html",
    "href": "code_tests.html",
    "title": "Connect to the Alphavantage API",
    "section": "",
    "text": "%load_ext autoreload\n%autoreload 2\nimport pandas as pd\nimport requests\nfrom config import settings\nimport datetime\nticker = \"NVD\"\n# replace the \"demo\" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={ticker}&apikey={settings.av_api_key}'\nresp = requests.get(url)\nresponse_data = resp.json()\nprint(\"response type:\", type(resp))\n\nresponse type: &lt;class 'requests.models.Response'&gt;\nresponse_code = resp.status_code  \n\nprint(\"code type:\", type(response_code))\nresponse_code\n\ncode type: &lt;class 'int'&gt;\n\n\n200\nresponse_text = resp.text  # REMOVERHS\n\nprint(\"response_text type:\", type(response_text))\nprint(response_text[:200])\n\nresponse_text type: &lt;class 'str'&gt;\n{\n    \"Meta Data\": {\n        \"1. Information\": \"Daily Prices (open, high, low, close) and Volumes\",\n        \"2. Symbol\": \"NVD\",\n        \"3. Last Refreshed\": \"2024-08-08\",\n        \"4. Output Size\": \"Co\n# Print `response_data` keys\nresponse_data.keys() \n\ndict_keys(['Meta Data', 'Time Series (Daily)'])\nif \"Time Series (Daily)\" not in response_data.keys():\n        raise Exception(f\"Invalid API call. The ticker symbol {ticker} is not correct\")\n# Extract `\"Time Series (Daily)\"` value from `response_data`\ndata = response_data[\"Time Series (Daily)\"]  \n\nprint(\"stock_data type:\", type(data))\n\n# Extract data for one of the days in `stock_data`\nkey = list(data.keys())[0]  \ndata[key]  \n\nstock_data type: &lt;class 'dict'&gt;\n\n\n{'1. open': '2.7700',\n '2. high': '3.0400',\n '3. low': '2.5700',\n '4. close': '2.5800',\n '5. volume': '46307411'}\nstock_df = pd.DataFrame.from_dict(data, orient=\"index\", dtype=float)\n\nprint(\"stock_df:\", stock_df.shape)\nprint()\nprint(stock_df.info())\nstock_df.head()\n\nstock_df: (100, 5)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 100 entries, 2024-08-08 to 2024-03-18\nData columns (total 5 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   1. open    100 non-null    float64\n 1   2. high    100 non-null    float64\n 2   3. low     100 non-null    float64\n 3   4. close   100 non-null    float64\n 4   5. volume  100 non-null    float64\ndtypes: float64(5)\nmemory usage: 4.7+ KB\nNone\n\n\n\n\n\n\n\n\n\n1. open\n2. high\n3. low\n4. close\n5. volume\n\n\n\n\n2024-08-08\n2.77\n3.040\n2.5700\n2.58\n46307411.0\n\n\n2024-08-07\n2.51\n2.970\n2.4609\n2.96\n44537199.0\n\n\n2024-08-06\n2.71\n2.910\n2.4900\n2.70\n50706281.0\n\n\n2024-08-05\n3.32\n3.380\n2.7600\n2.91\n80306160.0\n\n\n2024-08-02\n2.74\n2.849\n2.5050\n2.57\n73027140.0\n(pd.DataFrame\n .from_dict(data, \n            orient=\"index\")\n .rename_axis(index='date')\n .rename(columns=lambda col: col.split('. ')[1])\n .astype({'open': float, 'high': float, 'low': float, 'close': float})\n .select_dtypes(include=[float])\n)\n\n\n\n\n\n\n\n\nopen\nhigh\nlow\nclose\n\n\ndate\n\n\n\n\n\n\n\n\n2024-08-08\n2.77\n3.0400\n2.5700\n2.58\n\n\n2024-08-07\n2.51\n2.9700\n2.4609\n2.96\n\n\n2024-08-06\n2.71\n2.9100\n2.4900\n2.70\n\n\n2024-08-05\n3.32\n3.3800\n2.7600\n2.91\n\n\n2024-08-02\n2.74\n2.8490\n2.5050\n2.57\n\n\n...\n...\n...\n...\n...\n\n\n2024-03-22\n5.01\n5.0400\n4.6212\n4.67\n\n\n2024-03-21\n4.89\n5.1000\n4.8500\n4.99\n\n\n2024-03-20\n5.17\n5.3593\n5.1000\n5.11\n\n\n2024-03-19\n5.55\n5.7499\n5.0823\n5.21\n\n\n2024-03-18\n5.10\n5.4892\n4.8600\n5.33\n\n\n\n\n100 rows × 4 columns\ndef get_ticker_data(ticker):\n\n    url = (\"https://www.alphavantage.co/query?\"\n           \"function=TIME_SERIES_DAILY&\"\n           f\"symbol={ticker}&\"\n           \"outputsize=full&\"\n            \"datatype=json&\"\n           f\"apikey={settings.av_api_key}\")\n   \n    resp = requests.get(url)\n    response_data = resp.json()\n    \n    if \"Time Series (Daily)\" not in response_data.keys():\n        raise Exception(f\"Invalid API call. The ticker symbol {ticker} is not correct\")\n    \n    data = response_data[\"Time Series (Daily)\"]\n    return (pd.DataFrame\n             .from_dict(data, orient=\"index\")\n             .rename_axis(index='date')\n             .rename(columns=lambda col: col.split('. ')[1])\n             .astype({'open': float, 'high': float, 'low': float, 'close': float})\n             .select_dtypes(include=[float]))\n\nget_ticker_data(ticker=ticker)\n\n\n\n\n\n\n\n\nopen\nhigh\nlow\nclose\n\n\ndate\n\n\n\n\n\n\n\n\n2024-08-08\n2.7700\n3.0400\n2.5700\n2.5800\n\n\n2024-08-07\n2.5100\n2.9700\n2.4609\n2.9600\n\n\n2024-08-06\n2.7100\n2.9100\n2.4900\n2.7000\n\n\n2024-08-05\n3.3200\n3.3800\n2.7600\n2.9100\n\n\n2024-08-02\n2.7400\n2.8490\n2.5050\n2.5700\n\n\n...\n...\n...\n...\n...\n\n\n2023-08-28\n24.8100\n26.2700\n24.8100\n24.9600\n\n\n2023-08-25\n24.9900\n26.3500\n24.3000\n25.6400\n\n\n2023-08-24\n22.3500\n24.7400\n22.3500\n24.7000\n\n\n2023-08-23\n26.0724\n26.0724\n24.7790\n24.8748\n\n\n2023-08-22\n26.0073\n26.0073\n26.0073\n26.0073\n\n\n\n\n243 rows × 4 columns"
  },
  {
    "objectID": "code_tests.html#create-a-module-and-import-it-back-for-use",
    "href": "code_tests.html#create-a-module-and-import-it-back-for-use",
    "title": "Connect to the Alphavantage API",
    "section": "Create a module and import it back for use",
    "text": "Create a module and import it back for use\n\n%%writefile dashboard_utils.py\n\nfrom config import settings\nimport pandas as pd\nimport requests\nimport pandas_ta as ta\nimport plotly.graph_objs as go\nimport datetime\n\ndef get_current_time():\n    now = datetime.datetime.now()\n    return now\n\ndef is_non_farm_payrolls_friday(date):\n    first_day_of_month = datetime.date(date.year, date.month, 1)\n    first_friday = first_day_of_month + datetime.timedelta(days=(4 - first_day_of_month.weekday() + 7) % 7)\n    return date == first_friday\n\ndef find_non_farm_payrolls_friday(start_date):\n    fridays_count = 0\n    current_date = start_date\n    \n    while True:\n        current_friday = current_date + datetime.timedelta((4 - current_date.weekday() + 7) % 7)\n        fridays_count += 1\n        if is_non_farm_payrolls_friday(current_friday):\n            return fridays_count, current_friday\n        current_date = current_friday + datetime.timedelta(days=1)\n\ndef check_nfp_release():\n    today = datetime.date.today()\n    upcoming_friday = today + datetime.timedelta((4 - today.weekday() + 7) % 7)\n    if is_non_farm_payrolls_friday(upcoming_friday):\n        return \"This coming Friday is Non-Farm Payrolls by 12:30 pm (CET)\"\n    else:\n        fridays_count, nfp_friday = find_non_farm_payrolls_friday(today)\n        return f\"Non-Farm Payrolls: {fridays_count - 1} Fridays away!\"\n\n# Helper function to format numbers\ndef format_number(value):\n    return f\"{value:.4f}\"\n\ndef format_current_time(now):\n    return now.strftime(\"%B %d, %Y %H:%M:%S\")\n\ndef plot_candlestick_with_indicators(data, title=None, width=1200, height=800):\n    \"\"\"\n    Plots a candlestick chart with additional indicators.\n\n    Parameters:\n    - data (pd.DataFrame): DataFrame containing 'open', 'high', 'low', 'close',\n                           and indicator columns like 'DCL_20_20', 'DCM_20_20', 'DCU_20_20'.\n    - title (str): Title of the chart.\n    - width (int): Width of the chart.\n    - height (int): Height of the chart.\n    \"\"\"\n\n    # Ensure the necessary columns exist in the DataFrame\n    required_columns = ['open', 'high', 'low', 'close', 'DCL_20_20', 'DCM_20_20', 'DCU_20_20']\n    for col in required_columns:\n        if col not in data.columns:\n            raise ValueError(f\"Missing required column: {col}\")\n\n    # Create the candlestick trace\n    candlestick = go.Candlestick(\n        x=data.index,\n        open=data['open'],\n        high=data['high'],\n        low=data['low'],\n        close=data['close'],\n        name='Candlestick'\n    )\n\n    # Create the lines for the indicators\n    dcl_trace = go.Scatter(\n        x=data.index,\n        y=data['DCL_20_20'],\n        mode='lines',\n        name='DCL_20_20',\n        line=dict(color='blue')\n    )\n\n    dcm_trace = go.Scatter(\n        x=data.index,\n        y=data['DCM_20_20'],\n        mode='lines',\n        name='DCM_20_20',\n        line=dict(color='orange')\n    )\n\n    dcu_trace = go.Scatter(\n        x=data.index,\n        y=data['DCU_20_20'],\n        mode='lines',\n        name='DCU_20_20',\n        line=dict(color='green')\n    )\n\n    # Combine all the traces into a figure\n    fig = go.Figure(data=[candlestick, dcl_trace, dcm_trace, dcu_trace])\n\n    # Customize the layout\n    fig.update_layout(\n        title=title,\n        xaxis_title='Date',\n        yaxis_title='Price',\n        width=width,\n        height=height,\n        xaxis_rangeslider_visible=False  # Remove the range slider for a cleaner view\n    )\n\n    # Show the plot\n    fig.show()\n\n\ndef prepare_data_and_indicators(ticker):\n    data = get_ticker_data(ticker)\n    \n    donc = ta.donchian(high=data.high, \n                       low=data.low, \n                       lower_length=20, \n                       upper_length=20,)\n    \n    data_joined = (data\n               .join(donc)\n               .dropna()\n              )\n    return data_joined\n\n\n\ndef get_ticker_data(ticker):\n\n    url = (\"https://www.alphavantage.co/query?\"\n           \"function=TIME_SERIES_DAILY&\"\n           f\"symbol={ticker}&\"\n           # \"outputsize=full&\"\n            \"datatype=json&\"\n           f\"apikey={settings.av_api_key}\")\n   \n    resp = requests.get(url)\n    response_data = resp.json()\n    \n    if \"Time Series (Daily)\" not in response_data.keys():\n        raise Exception(f\"Invalid API call. The ticker symbol {ticker} is not correct\")\n    \n    data = response_data[\"Time Series (Daily)\"]\n    return (pd.DataFrame\n            .from_dict(data, orient=\"index\")\n            .rename_axis(index='date')\n            .rename(columns=lambda col: col.split('. ')[1])\n            .sort_index(ascending=True)\n            .astype({'open': float, 'high': float, 'low': float, 'close': float})\n            .select_dtypes(include=[float]))\n\nOverwriting dashboard_utils.py\n\n\n\nfrom dashboard_utils import *\n\n\nticker=\"AMD\"\n\n\ndata = get_ticker_data(ticker)\ndata.tail()\n\n\n\n\n\n\n\n\nopen\nhigh\nlow\nclose\n\n\ndate\n\n\n\n\n\n\n\n\n2024-08-02\n133.50\n137.10\n131.330\n132.50\n\n\n2024-08-05\n122.16\n139.14\n121.825\n134.82\n\n\n2024-08-06\n135.15\n136.44\n129.100\n130.18\n\n\n2024-08-07\n133.75\n136.24\n128.370\n128.67\n\n\n2024-08-08\n131.97\n136.48\n128.940\n136.32\n\n\n\n\n\n\n\n!cat dashboard_utils.py\n\nimport pandas_ta as ta\n\n\nhelp(ta.donchian)\n\nHelp on function donchian in module pandas_ta.volatility.donchian:\n\ndonchian(high, low, lower_length=None, upper_length=None, offset=None, **kwargs)\n    Donchian Channels (DC)\n    \n    Donchian Channels are used to measure volatility, similar to\n    Bollinger Bands and Keltner Channels.\n    \n    Sources:\n        https://www.tradingview.com/wiki/Donchian_Channels_(DC)\n    \n    Calculation:\n        Default Inputs:\n            lower_length=upper_length=20\n        LOWER = low.rolling(lower_length).min()\n        UPPER = high.rolling(upper_length).max()\n        MID = 0.5 * (LOWER + UPPER)\n    \n    Args:\n        high (pd.Series): Series of 'high's\n        low (pd.Series): Series of 'low's\n        lower_length (int): The short period. Default: 20\n        upper_length (int): The short period. Default: 20\n        offset (int): How many periods to offset the result. Default: 0\n    \n    Kwargs:\n        fillna (value, optional): pd.DataFrame.fillna(value)\n        fill_method (value, optional): Type of fill method\n    \n    Returns:\n        pd.DataFrame: lower, mid, upper columns.\n\n\n\n\ndonc = ta.donchian(high=data.high, low=data.low, lower_length=20, upper_length=20,)\n\n\ndata_joined = (data\n               .join(donc)\n               .dropna()\n              ).iloc[-100:]\ndata_joined\n\n\n\n\n\n\n\n\nopen\nhigh\nlow\nclose\nDCL_20_20\nDCM_20_20\nDCU_20_20\n\n\ndate\n\n\n\n\n\n\n\n\n\n\n\n2024-03-18\n193.285\n193.5000\n188.0500\n190.65\n161.810\n194.5550\n227.30\n\n\n2024-03-19\n183.160\n185.6127\n177.3602\n181.42\n161.810\n194.5550\n227.30\n\n\n2024-03-20\n182.030\n182.6800\n174.0000\n179.73\n172.000\n199.6500\n227.30\n\n\n2024-03-21\n185.970\n187.6900\n177.6600\n178.68\n172.490\n199.8950\n227.30\n\n\n2024-03-22\n177.210\n180.7600\n175.0500\n179.65\n172.490\n199.8950\n227.30\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2024-08-02\n133.500\n137.1000\n131.3300\n132.50\n130.240\n158.7600\n187.28\n\n\n2024-08-05\n122.160\n139.1400\n121.8250\n134.82\n121.825\n154.5525\n187.28\n\n\n2024-08-06\n135.150\n136.4400\n129.1000\n130.18\n121.825\n154.5525\n187.28\n\n\n2024-08-07\n133.750\n136.2400\n128.3700\n128.67\n121.825\n154.4675\n187.11\n\n\n2024-08-08\n131.970\n136.4800\n128.9400\n136.32\n121.825\n154.4075\n186.99\n\n\n\n\n100 rows × 7 columns\n\n\n\n\n# Optional: Plot an OHLC chart\ndata[['open', 'high', 'low', 'close']].iplot(kind='ohlc', title='NVIDIA Stock OHLC Chart')\n\n\n# Optional: Plot a Candlestick chart\ndata[['open', 'high', 'low', 'close']].iplot(kind='candle', title='NVIDIA Stock OHLC Chart')\n\n                                                \n\n\n\ndata_joined.iloc[:-100]\n\n\n\n\n\n\n\n\nopen\nhigh\nlow\nclose\nDCL_20_20\nDCM_20_20\nDCU_20_20\n\n\ndate\n\n\n\n\n\n\n\n\n\n\n\n2023-08-22\n26.0073\n26.0073\n26.0073\n26.0073\nNaN\nNaN\nNaN\n\n\n2023-08-23\n26.0724\n26.0724\n24.7790\n24.8748\nNaN\nNaN\nNaN\n\n\n2023-08-24\n22.3500\n24.7400\n22.3500\n24.7000\nNaN\nNaN\nNaN\n\n\n2023-08-25\n24.9900\n26.3500\n24.3000\n25.6400\nNaN\nNaN\nNaN\n\n\n2023-08-28\n24.8100\n26.2700\n24.8100\n24.9600\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2024-03-11\n5.6800\n5.9300\n5.3800\n5.7500\n4.48\n7.74815\n11.0163\n\n\n2024-03-12\n5.4500\n5.7100\n4.9400\n4.9400\n4.48\n7.74815\n11.0163\n\n\n2024-03-13\n5.0300\n5.3200\n4.9950\n5.0500\n4.48\n7.74815\n11.0163\n\n\n2024-03-14\n5.1900\n5.5400\n5.0900\n5.3700\n4.48\n7.74815\n11.0163\n\n\n2024-03-15\n5.4800\n5.5901\n5.1879\n5.4000\n4.48\n7.74815\n11.0163\n\n\n\n\n143 rows × 7 columns\n\n\n\n\n# Create the candlestick trace\ncandlestick = go.Candlestick(\n    x=data_joined.index,\n    open=data_joined['open'],\n    high=data_joined['high'],\n    low=data_joined['low'],\n    close=data_joined['close'],\n    name='Candlestick'\n)\n\n# Create the lines for the indicators\ndcl_trace = go.Scatter(\n    x=data_joined.index,\n    y=data_joined['DCL_20_20'],\n    mode='lines',\n    name='DCL_20_20',\n    line=dict(color='blue')\n)\n\ndcm_trace = go.Scatter(\n    x=data_joined.index,\n    y=data_joined['DCM_20_20'],\n    mode='lines',\n    name='DCM_20_20',\n    line=dict(color='orange')\n)\n\ndcu_trace = go.Scatter(\n    x=data_joined.index,\n    y=data_joined['DCU_20_20'],\n    mode='lines',\n    name='DCU_20_20',\n    line=dict(color='green')\n)\n\n# Combine all the traces into a figure\nfig = go.Figure(data=[candlestick, dcl_trace, dcm_trace, dcu_trace])\n\n# Customize the layout\nfig.update_layout(\n    title='Stock Candlestick Chart with Indicators',\n    xaxis_title='Date',\n    yaxis_title='Price',\n    width=1200,  # Adjust the width\n    height=800,  # Adjust the height\n    xaxis_rangeslider_visible=False  # Remove the range slider for cleaner view\n)\n\n# Show the plot\nfig.show()\n\n                                                \n\n\n\nplot_candlestick_with_indicators(data=data_joined, title='Stock Candlestick Chart with Indicators', width=1200, height=800)\n\n                                                \n\n\n\ndef prepare_data_and_indicators(ticker):\n    data = get_ticker_data(ticker)\n    \n    donc = ta.donchian(high=data.high, \n                       low=data.low, \n                       lower_length=20, \n                       upper_length=20,)\n    \n    data_joined = (data\n               .join(donc)\n               .dropna()\n              )\n    return data_joined\n\n\nprepare_data_and_indicators(ticker)\n\n\n\n\n\n\n\n\nopen\nhigh\nlow\nclose\nDCL_20_20\nDCM_20_20\nDCU_20_20\n\n\ndate\n\n\n\n\n\n\n\n\n\n\n\n1999-11-29\n28.38\n30.50\n28.310\n30.50\n19.880\n25.1900\n30.50\n\n\n1999-11-30\n29.75\n29.75\n27.880\n28.25\n19.940\n25.2200\n30.50\n\n\n1999-12-01\n28.25\n28.31\n27.060\n27.50\n19.940\n25.2200\n30.50\n\n\n1999-12-02\n27.94\n30.50\n27.750\n30.50\n19.940\n25.2200\n30.50\n\n\n1999-12-03\n29.88\n31.69\n28.630\n31.00\n20.250\n25.9700\n31.69\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2024-08-02\n133.50\n137.10\n131.330\n132.50\n130.240\n158.7600\n187.28\n\n\n2024-08-05\n122.16\n139.14\n121.825\n134.82\n121.825\n154.5525\n187.28\n\n\n2024-08-06\n135.15\n136.44\n129.100\n130.18\n121.825\n154.5525\n187.28\n\n\n2024-08-07\n133.75\n136.24\n128.370\n128.67\n121.825\n154.4675\n187.11\n\n\n2024-08-08\n131.97\n136.48\n128.940\n136.32\n121.825\n154.4075\n186.99\n\n\n\n\n6213 rows × 7 columns\n\n\n\n\nstock_data = prepare_data_and_indicators(ticker=ticker)\nplot_candlestick_with_indicators(data=stock_data, title=f'Stock Chart of {ticker}', width=1200, height=800)\n\n                                                \n\n\n\nticker = \"IBM\"\nstock_data = prepare_data_and_indicators(ticker=ticker)\nplot_candlestick_with_indicators(data=stock_data, title=f'Stock Chart of {ticker}', width=1200, height=800)\n\n                                                \n\n\n\nticker = \"AAPL\"\nstock_data = prepare_data_and_indicators(ticker=ticker)\nplot_candlestick_with_indicators(data=stock_data, title=f'Stock Chart of {ticker}', width=1200, height=800)\n\n                                                \n\n\n\nticker = \"MSF\"\nstock_data = prepare_data_and_indicators(ticker=ticker)\nplot_candlestick_with_indicators(data=stock_data, title=f'Stock Chart of {ticker}', width=1200, height=800)\n\n                                                \n\n\n\nticker = \"NVDA\"\nstock_data = prepare_data_and_indicators(ticker=ticker)\nplot_candlestick_with_indicators(data=stock_data, title=f'Stock Chart of {ticker}', width=1200, height=800)\n\n                                                \n\n\n\nticker = \"AMZN\"\nstock_data = prepare_data_and_indicators(ticker=ticker)\nplot_candlestick_with_indicators(data=stock_data, title=f'Stock Chart of {ticker}', width=1200, height=800)\n\n                                                \n\n\n\nticker = \"TSLA\"\nstock_data = prepare_data_and_indicators(ticker=ticker)\nplot_candlestick_with_indicators(data=stock_data, title=f'Stock Chart of {ticker}', width=1400, height=800)\n\n                                                \n\n\n\nimport numpy\n\n\nnumpy.__version__\n\n'1.26.4'"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to the Alphavantage Dashboard, your go-to tool for real-time insights and data-driven analysis designed specifically for traders and financial analysts. This dashboard is a comprehensive solution for accessing and visualizing market data, making it easier to make informed trading decisions.\n\nWhat This Dashboard Offers\n\nProject Overview: A detailed look at the Alphavantage Dashboard, highlighting its features, capabilities, and the underlying technology that powers it.\nDevelopment Journey: Insights into how the dashboard was created, including step-by-step guides from initial setup to final deployment, addressing challenges and solutions along the way.\nTechnical Tutorials: Comprehensive tutorials on how the dashboard integrates with the Alphavantage API, along with tips on using tools like Quarto for rendering and publishing content.\nUpdates and Enhancements: Regular updates on new features, enhancements, and improvements to the dashboard, along with future development plans.\nDeployment Tips: Best practices for deploying data-driven dashboards, including workflow automation using GitHub Actions and other CI/CD tools.\n\n\n\nAbout the Creator\nI’m Ricky Macharm, a developer with a deep interest in creating data-driven tools that empower traders and analysts. The Alphavantage Dashboard is a key project that merges my expertise in algorithmic trading, data science, and software development.\nThis dashboard is a culmination of the insights, tools, and knowledge I’ve gained throughout its development. Whether you’re a developer looking to create something similar or a trader aiming to leverage data more effectively, this dashboard is built to meet your needs.\n\n\nGet Involved\nIf you’re interested in the Alphavantage Dashboard or have suggestions for new features, feel free to reach out! You can connect with me for more updates and to join the conversation.\nThank you for using the Alphavantage Dashboard—I hope it helps you in making better, data-driven trading decisions!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Alphavantage Dashboard",
    "section": "",
    "text": "No matching items"
  }
]